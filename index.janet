### index.janet
###
### Bagatto SSG site for the Story template by HTML5UP.
### Bagatto port by hdrz
###
### Bagatto is perfect for single page websites. This is my
### first try at this, please report any problems you find.

#
# Global Config
#

## `bagatto/set-output-dir!` will set the top level of the directory
## hierarchy that files are created in. This is quite useful, as it
## allows us to use relative directories elsewhere when linking within
## the site.
(bagatto/set-output-dir! "site")

#
# Data Specification
#

### The first value we need to define is `data`, which is the *data
### specification* for our site. It is a simple key-value data
### structure which maps specification names to specifications. Each
### data spec contains an `attrs` and an optional `src` value. If it
### only contains `attrs`, the value at `attrs` will be included
### directly into the site data. If it contains `src`, the value at
### `src` will be evaluated to load one or more *source files*, and
### the value at `attrs` will be treated as a function that's applied
### to each source file, and expected to return the metadata used in
### rendering the site.

(def data {# :config is a literal struct containing some site-wide
           # metadata.
           :config {:attrs {:title "Bagatto Story"
                            :description "Story site generated by Bagatto"
                            :author "hdrz"
                            :static "static"
                            :github "#"
                            :twitter "#"
                            :instagram "#"
                            :linkedin "#"
                            :email "mailto:#"}}
           # `bagatto/*` will simply list all the files (for later
           # copying); `bagatto/slurp-*` will read them all into
           # memory as well.
           #
           # top banner (hero image & text)
           :banner {:src "content/banner.md"
                    :attrs bagatto/parse-mago}
           #
           # spotlights (and pages if you wish)
           :pages {:src (bagatto/slurp-* "content/pages/*.md")
                   :attrs bagatto/parse-mago}
           #
           # gallery pics
           :gallery {:src (bagatto/slurp-* "content/gallery/*.md")
                     :attrs bagatto/parse-mago}
           #
           # items with text and fontawsome icons
           :items {:src (bagatto/slurp-* "content/items/*.md")
                   :attrs bagatto/parse-mago}
          }
)

#
# Site Specification
#

## The second value we need to define is `site`, which will be the
## *site specification* for our site. A site specification maps
## specification names to individual specification entries. Each site
## spec will define one or more files to write by giving the path and
## contents of the new files. The names are not used by Bagatto, but
## are useful to the site author for organizational purposes.

## Define a path generator function. A path generator takes two
## arguments: the site data and a single item. It should output the
## path to be written for a file generated from that item.
##
## In this case the single item will be each of the entries in
## `:pages`, above. `page-path` will be a function; it calls
## `bagatto/%p`, which is a convenient way to generate path generator
## functions. `bagatto/%p` provides a simple dsl for defining
## paths. Here we specify a path that looks like this:
## "pages/{{ (slugify (item :basename)) }}.html".
## (def page-path (bagatto/%p "pages" '%i :basename '% ".html"))
(def page-path (bagatto/%p "pages" '%i "title" '% ".html"))
(def page-renderer (bagatto/renderer "/templates/page" {:root "../"}))

(def site {# :index is a single file whose path we can specify as a
           # literal string.
           #
           # To specify the contents of the index we call
           # `bagatto/renderer` which returns a *renderer
           # function*. `bagatto/renderer` takes a template path, and
           # optional attributes to merge into the template
           # arguments. It will return a function which will take the
           # site data and output the contents of the index.
           :index {:dest "index.html"
                   :out (bagatto/renderer "/templates/index")}
           #
           # If you want to generate seperate pages for each of the
           # spotlights, uncomment the next lines. Also, you need to
           # provide the right template.
           # :pages {:each :pages
           #         :dest page-path
           #         :out page-renderer}
           #
           # Uncomment the next lines if you need them (if not done already)
           #
           # Copy all static content to generated site
           # (sh/$< cp -r "static" "site/")
           #
           # compile all *.scss files
           # (sh/$< sass assets/sass:static/css)
           #
           # cat all *.js files and minify (or use another compressor)
           # (sh/$< cat assets/js/* | minify > static/js/bundle.min.js)
           #
           # compress fontawsome.js file using gzip (it's 2023, all
           # browsers support this..)
           # (sh/$< gzip -k assets/fontawsome-js/fontawsome-all.min.js && mv assets/fontawsome-js/fontawsome-all.min.js.gz static/js/)
          }
)
